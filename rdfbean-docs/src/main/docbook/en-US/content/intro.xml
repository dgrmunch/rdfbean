<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="intro" revision="1">
    <title>Introduction</title>
    
    <sect1>
      <title>Background</title>
      
      <para>
      RDFBean was born out of the need for a flexible Object/RDF mapping tool.
      With the rise of ORM mapping tools such as Hibernate and Toplink JavaBean based
      domain model usage became popular in Java application development.
      JavaBean tool support is excellent for property binding and visualization in popular
      template frameworks for Web applications.
      </para>
      
      <para>       
      RDFBean aims to provide a transparent mapping between JavaBean domain models and RDF
      based schemas and ontologies to make Java based RDF usage as easy as in ORM tools
      and even easier.
      </para>
    
    </sect1>
        
    <sect1>
    
      <title>Usage strategies</title>
      
      <para>RDFBean supports two development strategies : JavaBean driven and Schema driven 
      development. JavaBean driven development is the primary model of RDFBean usage. In this case
      you maintain your JavaBean domain models and create a mapping to RDF data through annotations on
      class, method and field level. Your JavaBean model is the primary model and the RDF model
      is derived from your annotated domain model.</para>
      
      <para>
      In the Schema driven approach your RDF Schema or OWL ontology is your primary model and your JavaBean
      model is derived from it. 
      The Java driven approach fits to scenarios where your application comes first and you want to maintain 
      full control of your JavaBean model the schema serves the application. The Schema driven approach fits
      better if the RDF schema is given to you and you want your Java model to adapt to it automatically.
      </para>
    
    </sect1>
    
</chapter>    