<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<sect1 id="getting-started" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Getting started with RDFBean</title>
    
    <para>The core of RDFBean usage is the usage of RDFBean annotated domain types.</para>
    
    <sect2>
    
      <title>RDFBean annotations</title>
      
      <para><emphasis>ClassMapping</emphasis> declares a mapping from a Java type to an RDF type. If your Java type simple name
      is equal to the local name of the RDF type, which is a good practice, all you need to do is to declare 
      the namespace. The namespace is best kept accessible via a public static final constant : </para>
      
<programlisting language="java"><![CDATA[    
@ClassMapping(ns=MYPROJECT.NS)
public class User {

    // ...
}
]]></programlisting>        
      
      <para><emphasis>Predicate</emphasis> declares a mapping from a Java property to an RDF predicate / property. 
        You can annotate getters and fields with it. </para>
        
      <para>A good practice is to not repeat the namespace declaration for a Predicate annotation, if the predicates 
      namespace is the same as the namespace of the host type : </para>
      
<programlisting language="java"><![CDATA[    
@ClassMapping(ns=MYPROJECT.NS)
public class User {

    @Predicate(ln="user_name")
    private String userName;
    
    @Predicate
    private String email;
}
]]></programlisting>          

    <para>The default value for the local name is the property's name.</para>
    
    <para><emphasis>Id</emphasis> is used to annotate properties holding the id of the entity. The default is to handle 
    the id as an RDFBean managed integer surrogate id. Numeric ids are shorter than full URLs or bnode ids and are easier
    to use on the application level :</para>
    
<programlisting language="java"><![CDATA[    
@ClassMapping(ns=MYPROJECT.NS)
public class User {

    @Id
    private String id;

    @Predicate(ln="user_name")
    private String userName;
    
    @Predicate
    private String email;
}
]]></programlisting>          
    
    <para>Alternatively the id can be inject in IDType.URI or IDType.RESOURCE form. Use the UID type for URI injection
    and ID for RESOURCE typed injection.</para>
    
    <para>A good practice is to use <emphasis>MappedClasses</emphasis> in the domain package package-info.java to declare the
    annotated types in the package.</para>
    
    <para>This way you can use <emphasis>DefaultConfiguration.addPackages</emphasis> to configure the annoteated types. </para>
    
    <para><emphasis>Localized</emphasis> ...</para>
    
    <para><emphasis>Mixin</emphasis> ...</para>
    
    <para><emphasis>Context</emphasis> ...</para>
    
    <para><emphasis>Path</emphasis> ... </para>
    
    <para><emphasis>Required</emphasis> ...</para>
    
    <para><emphasis>Unique</emphasis> ...</para>
    
    </sect2>
    
</sect1>    